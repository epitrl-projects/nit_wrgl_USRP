options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: audio_tx_fm
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '2000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: variable_qtgui_chooser_0
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    label0: '"song1"'
    label1: '"song2"'
    label2: ''
    label3: ''
    label4: ''
    labels: '[]'
    num_opts: '2'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QVBoxLayout
    type: int
    value: '0'
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 4.0]
    rotation: 0
    state: true
- name: analog_wfm_rcv_0
  id: analog_wfm_rcv
  parameters:
    affinity: ''
    alias: ''
    audio_decimation: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: 400e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 404.0]
    rotation: 0
    state: disabled
- name: analog_wfm_tx_0
  id: analog_wfm_tx
  parameters:
    affinity: ''
    alias: ''
    audio_rate: '40000'
    comment: ''
    fh: '-1'
    max_dev: 75e3
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: '400000'
    tau: 75e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 52.0]
    rotation: 0
    state: true
- name: blocks_wavfile_source_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: /home/pi/Desktop/project/assets/Souraa.mp3
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 172.0]
    rotation: 0
    state: disabled
- name: blocks_wavfile_source_0_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: /home/pi/Desktop/project/assets/National_Anthem.mp3
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 244.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\nimport numpy as np\nfrom gnuradio import gr\nimport os\nfrom\
      \ pydub import AudioSegment\n\nclass myblock(gr.sync_block):\n    \"\"\"\n \
      \   Custom block to stream an MP3 file from a folder based on a selection value\
      \ (weight).\n    \"\"\"\n    def __init__(self, folder_path=\"/home/pi/Desktop/project/assets\"\
      , weight=1):\n        # Initialize the block with no inputs and one output\n\
      \        gr.sync_block.__init__(self,\n            name=\"myblock\",\n     \
      \       in_sig=None,\n            out_sig=[np.float32])\n\n        self.folder_path\
      \ = folder_path\n        self.weight = weight\n        self.previous_weight\
      \ = weight  # Store the previous weight to detect changes\n        self.audio_position\
      \ = 0\n        self.selected_audio = None\n        \n        # Load and validate\
      \ MP3 files in the directory\n        self.mp3_files = sorted([f for f in os.listdir(folder_path)\
      \ if f.endswith('.mp3')])\n        if not self.mp3_files:\n            raise\
      \ ValueError(\"No MP3 files found in the specified folder.\")\n        \n  \
      \      # Load the initial MP3 file based on the weight index\n        self.load_mp3_by_weight()\n\
      \n    def load_mp3_by_weight(self):\n        \"\"\" Load the MP3 file corresponding\
      \ to the current weight index \"\"\"\n        if self.weight >= 0 and self.weight\
      \ < len(self.mp3_files):\n            filename = self.mp3_files[self.weight]\n\
      \            self.load_mp3(filename)\n        else:\n            raise ValueError(\"\
      Invalid weight index: out of range for available MP3 files.\")\n\n    def load_mp3(self,\
      \ filename):\n        \"\"\" Load the selected MP3 file as raw PCM audio data\
      \ \"\"\"\n        audio_path = os.path.join(self.folder_path, filename)\n  \
      \      audio = AudioSegment.from_mp3(audio_path)\n        \n        # Convert\
      \ to raw PCM 32-bit float data\n        samples = np.array(audio.get_array_of_samples())\n\
      \        \n        # If the audio is stereo, flatten the samples\n        if\
      \ audio.channels == 2:\n            samples = samples.reshape((-1, 2)).mean(axis=1)\n\
      \        \n        # Normalize to the range [-1, 1]\n        self.selected_audio\
      \ = samples.astype(np.float32) / np.iinfo(audio.array_type).max\n        \n\
      \        # Reset audio position\n        self.audio_position = 0\n        print(f\"\
      Loaded MP3 file: {filename}, Total samples: {len(self.selected_audio)}\")\n\n\
      \    def check_and_update_weight(self):\n        \"\"\" Check if the weight\
      \ has changed, and update the MP3 file if it has \"\"\"\n        if self.weight\
      \ != self.previous_weight:\n            print(f\"Weight changed from {self.previous_weight}\
      \ to {self.weight}\")\n            self.previous_weight = self.weight\n    \
      \        self.load_mp3_by_weight()\n            self.reset_audio_stream()\n\n\
      \    def reset_audio_stream(self):\n        \"\"\" Clear the output buffer to\
      \ start streaming the new audio immediately \"\"\"\n        self.audio_position\
      \ = 0  # Reset position to the beginning of the new audio\n\n    def work(self,\
      \ input_items, output_items):\n        # Check if the weight has changed and\
      \ update if necessary\n        self.check_and_update_weight()\n\n        # Determine\
      \ how many samples we need to output\n        num_samples = len(output_items[0])\n\
      \n        if self.selected_audio is None:\n            output_items[0][:] =\
      \ np.zeros(num_samples)\n            return num_samples\n\n        # Output\
      \ the selected portion of the audio file\n        start = self.audio_position\n\
      \        end = start + num_samples\n\n        if end <= len(self.selected_audio):\n\
      \            output_items[0][:] = self.selected_audio[start:end]\n         \
      \   self.audio_position = end\n        else:\n            # If we've reached\
      \ the end of the audio, pad with zeros\n            valid_samples = len(self.selected_audio)\
      \ - start\n            output_items[0][:valid_samples] = self.selected_audio[start:]\n\
      \            output_items[0][valid_samples:] = 0\n            self.audio_position\
      \ = len(self.selected_audio)  # Stop streaming\n            print(\"Reached\
      \ the end of the audio stream\")\n\n        return num_samples\n\n# Example\
      \ usage:\n# block = myblock(folder_path=\"/path/to/mp3/folder\", weight=2)\n\
      # block.weight = 1  # Changing the weight during runtime\n"
    affinity: ''
    alias: ''
    comment: ''
    folder_path: '"/home/pi/Desktop/project/assets"'
    maxoutbuf: '0'
    minoutbuf: '0'
    weight: variable_qtgui_chooser_0
  states:
    _io_cache: ('myblock', 'myblock', [('folder_path', "'/home/pi/Desktop/project/assets'"),
      ('weight', '1')], [], [('0', 'float', 1)], '\n    Custom block to stream an
      MP3 file from a folder based on a selection value (weight).\n    ', ['folder_path',
      'weight'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 204.0]
    rotation: 0
    state: true
- name: epy_block_1_0_0
  id: epy_block
  parameters:
    _source_code: "# import numpy as np\n# from gnuradio import gr\n# import pmt\n\
      # import os\n# from gtts import gTTS\n# from pydub import AudioSegment\n\n#\
      \ class text_to_wav_block(gr.sync_block):  \n#     \"\"\"Embedded Python Block\
      \ example - converts text to WAV and outputs float32 data\"\"\"\n\n#     def\
      \ __init__(self, sample_rate=48000):  \n#         \"\"\"arguments to this function\
      \ show up as parameters in GRC\"\"\"\n#         gr.sync_block.__init__(\n# \
      \            self,\n#             name='text_to_wav_block',   # will show up\
      \ in GRC\n#             in_sig=[],\n#             out_sig=[np.float32]  # Output\
      \ signal as float32\n#         )\n#         self.sample_rate = sample_rate\n\
      #         self.text = \"no input\"\n#         self.filename = \"output.wav\"\
      \n#         self.wav_data = np.array([], dtype=np.float32)  # Initialize an\
      \ empty array for WAV data\n#         self.message_port_register_in(pmt.intern(\"\
      MSG_IN\"))\n#         self.set_msg_handler(pmt.intern(\"MSG_IN\"), self.set_text)\n\
      \n#     def set_text(self, msg):\n#         \"\"\"\n#         Sets the text\
      \ to be converted to WAV.\n#         \"\"\"\n#         self.text = str(msg)\n\
      #         print(msg)\n#         self.convert_to_wav()\n\n#     def convert_to_wav(self):\n\
      #         \"\"\"\n#         Converts the stored text to a WAV file and loads\
      \ the WAV data for output.\n#         \"\"\"\n#         if self.text:\n#   \
      \          tts = gTTS(text=self.text, lang='en')\n#             tts.save(\"\
      temp.mp3\")  # Save as mp3 temporarily\n\n#             # Convert mp3 to wav\n\
      #             sound = AudioSegment.from_mp3(\"temp.mp3\")\n#             sound\
      \ = sound.set_frame_rate(self.sample_rate)  # Ensure correct sample rate\n#\
      \             sound.export(self.filename, format=\"wav\")\n#             print(f\"\
      Audio saved as {self.filename}\")\n            \n#             # Load the WAV\
      \ data into memory as a numpy array\n#             self.wav_data = np.array(sound.get_array_of_samples(),\
      \ dtype=np.float32)\n            \n#             # Normalize the data to the\
      \ range [-1, 1]\n#             self.wav_data /= np.iinfo(np.int16).max\n   \
      \         \n#             # Clean up the temporary mp3 file\n#             os.remove(\"\
      temp.mp3\")\n#         else:\n#             print(\"No text provided for conversion.\"\
      )\n\n#     def work(self, input_items, output_items):\n#         \"\"\"Output\
      \ the float32 WAV data\"\"\"\n#         output_length = len(output_items[0])\n\
      #         data_length = len(self.wav_data)\n        \n#         # Ensure we\
      \ don't exceed the length of the WAV data\n#         if data_length > 0:\n#\
      \             output_items[0][:min(output_length, data_length)] = self.wav_data[:min(output_length,\
      \ data_length)]\n#             self.wav_data = self.wav_data[min(output_length,\
      \ data_length):]  # Update remaining data\n#         else:\n#             output_items[0][:]\
      \ = 0  # No data to output\n\n#         return len(output_items[0])\n\n\n\n\
      import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport os\nfrom gtts\
      \ import gTTS\nfrom pydub import AudioSegment\n\nclass text_to_wav_block(gr.sync_block):\
      \  \n    \"\"\"Embedded Python Block - converts text to WAV and streams float32\
      \ data\"\"\"\n\n    def __init__(self, sample_rate=48000):  \n        \"\"\"\
      Arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='text_to_wav_block',   # Will show up in\
      \ GRC\n            in_sig=[],\n            out_sig=[np.float32]  # Output signal\
      \ as float32\n        )\n        self.sample_rate = sample_rate\n        self.text\
      \ = \"no input\"\n        self.filename = \"output.wav\"\n        self.wav_data\
      \ = np.array([], dtype=np.float32)  # Initialize an empty array for WAV data\n\
      \        self.message_port_register_in(pmt.intern(\"MSG_IN\"))\n        self.set_msg_handler(pmt.intern(\"\
      MSG_IN\"), self.set_text)\n        self.data_index = 0  # To keep track of where\
      \ we are in the wav_data\n\n    def set_text(self, msg):\n        \"\"\"\n \
      \       Sets the text to be converted to WAV.\n        \"\"\"\n        self.text\
      \ = str(pmt.symbol_to_string(msg))\n        print(f\"Received text: {self.text}\"\
      )\n        self.convert_to_wav()\n        self.data_index = 0  # Reset the data\
      \ index when new text is received\n\n    def convert_to_wav(self):\n       \
      \ \"\"\"\n        Converts the stored text to a WAV file and loads the WAV data\
      \ for output.\n        \"\"\"\n        try:\n            tts = gTTS(text=self.text,\
      \ lang='en')\n            tts.save(\"temp.mp3\")  # Save as mp3 temporarily\n\
      \n            # Convert mp3 to wav\n            sound = AudioSegment.from_mp3(\"\
      temp.mp3\")\n            sound = sound.set_frame_rate(self.sample_rate)  # Ensure\
      \ correct sample rate\n            sound.export(self.filename, format=\"wav\"\
      )\n            print(f\"Audio saved as {self.filename}\")\n            \n  \
      \          # Load the WAV data into memory as a numpy array\n            self.wav_data\
      \ = np.array(sound.get_array_of_samples(), dtype=np.float32)\n            \n\
      \            # Normalize the data to the range [-1, 1]\n            self.wav_data\
      \ /= np.iinfo(np.int16).max\n            \n            # Clean up the temporary\
      \ mp3 file\n            os.remove(\"temp.mp3\")\n        except Exception as\
      \ e:\n            print(f\"Error in convert_to_wav: {e}\")\n            self.wav_data\
      \ = np.array([], dtype=np.float32)  # Reset on error\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"Stream the float32 WAV data continuously until\
      \ a new message is received\"\"\"\n        output_length = len(output_items[0])\n\
      \        data_length = len(self.wav_data)\n\n        if data_length > 0:\n \
      \           for i in range(output_length):\n                output_items[0][i]\
      \ = self.wav_data[self.data_index]\n                self.data_index += 1\n \
      \               if self.data_index >= data_length:\n                    self.data_index\
      \ = 0  # Loop back to the start of wav_data\n        else:\n            output_items[0][:]\
      \ = 0  # Output silence if no data\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: '32000'
  states:
    _io_cache: ('text_to_wav_block', 'text_to_wav_block', [('sample_rate', '48000')],
      [('MSG_IN', 'message', 1)], [('0', 'float', 1)], 'Embedded Python Block - converts
      text to WAV and streams float32 data', ['sample_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 116.0]
    rotation: 0
    state: disabled
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: 100e3
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: 10e3
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 348.0]
    rotation: 0
    state: disabled
- name: qtgui_edit_box_msg_0_0_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: ''
    is_pair: 'False'
    is_static: 'False'
    key: ''
    label: '"enter message"'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: '"hello world"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 236.0]
    rotation: 0
    state: disabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '12'
    fbw: '0'
    interp: '50'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 156.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '12'
    fbw: '0'
    interp: '50'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 372.0]
    rotation: 0
    state: disabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"TX/RX"'
    ant10: '"TX/RX"'
    ant11: '"TX/RX"'
    ant12: '"TX/RX"'
    ant13: '"TX/RX"'
    ant14: '"TX/RX"'
    ant15: '"TX/RX"'
    ant16: '"TX/RX"'
    ant17: '"TX/RX"'
    ant18: '"TX/RX"'
    ant19: '"TX/RX"'
    ant2: '"TX/RX"'
    ant20: '"TX/RX"'
    ant21: '"TX/RX"'
    ant22: '"TX/RX"'
    ant23: '"TX/RX"'
    ant24: '"TX/RX"'
    ant25: '"TX/RX"'
    ant26: '"TX/RX"'
    ant27: '"TX/RX"'
    ant28: '"TX/RX"'
    ant29: '"TX/RX"'
    ant3: '"TX/RX"'
    ant30: '"TX/RX"'
    ant31: '"TX/RX"'
    ant4: '"TX/RX"'
    ant5: '"TX/RX"'
    ant6: '"TX/RX"'
    ant7: '"TX/RX"'
    ant8: '"TX/RX"'
    ant9: '"TX/RX"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: 107.5e6
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: ''
    gain0: '50'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: '2000000'
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[0]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 84.0]
    rotation: 0
    state: true
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: 107.5e6
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: '50'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[0]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 372.0]
    rotation: 0
    state: disabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: '11'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 364.0]
    rotation: 0
    state: disabled

connections:
- [analog_wfm_rcv_0, '0', rational_resampler_xxx_0_0, '0']
- [analog_wfm_tx_0, '0', rational_resampler_xxx_0, '0']
- [epy_block_0, '0', analog_wfm_tx_0, '0']
- [epy_block_1_0_0, '0', analog_wfm_tx_0, '0']
- [low_pass_filter_0, '0', analog_wfm_rcv_0, '0']
- [qtgui_edit_box_msg_0_0_0, msg, epy_block_1_0_0, MSG_IN]
- [rational_resampler_xxx_0, '0', uhd_usrp_sink_0, '0']
- [rational_resampler_xxx_0_0, '0', virtual_sink_0, '0']
- [uhd_usrp_source_0, '0', low_pass_filter_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.5.1
